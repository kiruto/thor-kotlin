import groovy.json.JsonSlurper

task createEnvironment {
    doLast {
        if (use_local_properties) {
            def file = new File(rootDir, 'local.properties')
            if (file.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream("$project.rootDir/local.properties"))
                props.each { prop ->
                    if (!prop.value.toString().isEmpty()) {
                        project.ext.set(prop.key, prop.value)
                    }
                }
            } else {
                println("Create local properties, this file shall never be commited.")
                file.withWriter('utf-8') { writer ->
                    writer.writeLine '# this file shall never be commited.'
                    writer.writeLine '# left the field empty if you don\'t use.'
                    writer.writeLine ''
                    writer.writeLine '# AES key, the value must be 64 bit.'
                    writer.writeLine 'aes_key='
                    writer.writeLine ''
                    writer.writeLine '# set the dsn if you use sentry'
                    writer.writeLine 'sentry_dsn='
                }
                println("local properties has been created.")
            }
        }

        def slurper = new JsonSlurper()
        def hosts = slurper.parseText host

        def file = new File(rootDir, 'env/src/main/kotlin/com/exyui/thor/env.kt')
        println("Creating environment configuration file...")
        file.withWriter('utf-8') { writer ->
            writer.writeLine 'package com.exyui.thor'
            writer.writeLine ''
            writer.writeLine '/**'
            writer.writeLine " * Created by machine on ${new Date().format('yyyy-MM-dd')}"
            writer.writeLine ''
            writer.writeLine ' * This file is generated automatically, DO NOT modify!!!'
            writer.writeLine ' */'
            writer.writeLine ''
            writer.writeLine "const val DEBUG = $debug"
            writer.writeLine ""
            writer.writeLine "const val SQLITE_FILE = \"$db_file\""
            writer.writeLine "const val HTTP_PORT = $http_port"
            writer.writeLine "const val MODERATED = false"
            writer.writeLine ""
            writer.writeLine "const val PACKAGE_VERSION = \"$version\""
            writer.writeLine "const val HOST_DEBUG = \"http://127.0.0.1\""
            writer.writeLine "const val HEAP_SIZE = ${heap_size}L"
            writer.writeLine "const val OFF_HEAP_SIZE = ${off_heap_size}L"
            writer.writeLine "const val AES_KEY = \"$aes_key\""
            writer.writeLine "const val SENTRY_DSN = \"${project.hasProperty('sentry_dsn')?sentry_dsn: ""}\""
            writer.writeLine "const val LOG_PATH = \"$rootDir/$log_path\""
            writer.writeLine "const val LOG_MAX_SIZE = \"$log_max_size\""
            writer.writeLine "val HOST_RELEASE = listOf("
            hosts.eachWithIndex { val, idx ->
                writer.writeLine "    \"$val\"" + (idx == hosts.size() - 1? "": ",")
            }
            writer.writeLine ")"
            writer.writeLine "const val ORIGIN_DEBUG = \"*\""
            writer.writeLine "val ORIGIN_RELEASE = listOf("
            hosts.eachWithIndex { val, idx ->
                writer.writeLine "    \"$val\"" + (idx == hosts.size() - 1? "": ",")
            }
            writer.writeLine ")"
        }
        println("Environment configuration file created!")
    }
}

compileKotlin.dependsOn createEnvironment